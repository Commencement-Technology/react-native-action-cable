var ChannelMixin,_capitalize;_capitalize=require("lodash.capitalize"),ChannelMixin=function(){var n;return n=Array.prototype.slice.call(arguments),{componentDidMount:function(){var e,t,i,a,c,o;for(t=this.props.cable||this.context.cable,this.mounted=!0,o=[],a=0,c=n.length;c>a;a++)i=n[a],t.channel(i).on("connected",this.handleConnected),t.channel(i).on("disconnected",this.handleDisconnected),t.channel(i).on("rejected",this.handleDisconnected),o.push(function(){var n,a,c,o;for(c=t.channel(i).actions,o=[],n=0,a=c.length;a>n;n++)e=c[n],o.push(t.channel(i).on(e,this["handle"+_capitalize(e)]()));return o}.call(this));return o},componentWillUnmount:function(){var e,t,i,a,c,o;for(t=this.props.cable||this.context.cable,this.mounted=!1,o=[],a=0,c=n.length;c>a;a++)i=n[a],t.channel(i).removeListener("connected",this.handleConnected),t.channel(i).removeListener("disconnected",this.handleDisconnected),t.channel(i).removeListener("rejected",this.handleDisconnected),o.push(function(){var n,a,c,o;for(c=t.channel(i).actions,o=[],n=0,a=c.length;a>n;n++)e=c[n],o.push(t.channel(i).removeListener(e,this["handle"+_capitalize(e)]()));return o}.call(this));return o},perform:function(n,e,t){var i;return null==t&&(t={}),i=this.props.cable||this.context.cable,i.channel(n).perform(e,t)}}},ChannelMixin.componentWillMount=function(){throw new Error('ActionCableReact.ChannelMixin is a function that takes one or more store names as parameters and returns the mixin, e.g.: mixins: [ActionCableReact.ChannelMixin("Channel1", "Channel2")]')},module.exports=ChannelMixin;